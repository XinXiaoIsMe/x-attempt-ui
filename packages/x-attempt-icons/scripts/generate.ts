import { resolve } from 'node:path'
import { glob } from 'fast-glob'
import fs from 'fs-extra'
import { type BuiltInParserName, format } from 'prettier'
import consola from 'consola'
import { getName } from './utils'
import { componentDir, rootDir } from './paths'

async function generateComponents(files: string[]) {
  const fileContents = await Promise.all(files.map(file => fs.readFile(file, { encoding: 'utf8' })))
  const [filenames, componentNames] = getName(files)
  filenames.forEach(async (filename, i) => {
    const vueContent = await createVueTemplate(componentNames[i], fileContents[i])
    fs.writeFileSync(resolve(componentDir, `${filename}.vue`), vueContent, 'utf8')
  })
}

async function getSvgFiles() {
  return await glob(resolve(rootDir, 'svg/*.svg'), {
    absolute: true,
  })
}

function createVueTemplate(name: string, content: string) {
  return formatCode(`
<template>
  ${content}
</template>

<script lang="ts" setup>
// generated by scripts/generate.ts
defineOptions({
  name: '${name}'
})
</script>
`, 'vue')
}

function formatCode(code: string, parser: BuiltInParserName = 'typescript') {
  return format(code, {
    parser,
    semi: false,
    singleQuote: true,
  })
}

function generateIndexFile(files: string[]) {
  const [filenames, componentNames] = getName(files)
  const content = filenames.map((filename, i) => {
    return `export { default as ${componentNames[i]} } from './${filename}.vue'`
  }).join('\n')
  fs.writeFileSync(resolve(componentDir, 'index.ts'), content, 'utf8')
}

async function generate() {
  const files = await getSvgFiles()
  fs.emptyDirSync(componentDir)
  consola.start('start generate icons...')
  await generateComponents(files)
  generateIndexFile(files)
  consola.success('generate icons success.')
}

generate()
